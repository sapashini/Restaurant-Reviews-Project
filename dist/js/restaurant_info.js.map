{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/idb/lib/idb.js","src/js/dbhelper.js","src/js/dbpromise.js","src/js/register-sw.js","src/js/restaurant_info.js","src/js/secret.js"],"names":[],"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","file":"restaurant_info.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      // Don't create iterateKeyCursor if openKeyCursor doesn't exist.\n      if (!(funcName in Constructor.prototype)) return;\n\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      if (request) {\n        request.onupgradeneeded = function(event) {\n          if (upgradeCallback) {\n            upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n          }\n        };\n      }\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n","/*\r\n* I wil like to acknoledge the inspiration and guide I got from MWS Restaurant Reviews Project.\r\n* A Walkthrough by Alexandro Perez.Also,I adapted some of the walk through codes to make mine fully functionable.\r\n*/\r\n\r\n/*\r\n* Module import.\r\n*/\r\nimport dbPromise from './dbpromise';\r\n\r\n/**\r\n * Common database helper functions.\r\n */\r\nexport default class DBHelper {\r\n\r\n  /**\r\n   * API URL\r\n   */\r\n  static get API_URL() {\r\n    const port = 1337; // port where sails server will listen.\r\n    return `http://localhost:${port}`;\r\n  }\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 8000 // Change this to your server port\r\n    return `http://localhost:${port}/data/restaurants.json`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.open('GET', `${DBHelper.API_URL}/restaurants`);\r\n    xhr.onload = () => {\r\n      if (xhr.status === 200) {\r\n        const restaurants = JSON.parse(xhr.responseText);\r\n        dbPromise.putRestaurants(restaurants);\r\n        callback(null, restaurants);\r\n      } else {\r\n        console.log(`Request failed. Returned status of ${xhr.status}, trying idb...`);\r\n        // If xhr request isn't code 200, try idb.\r\n        dbPromise.getRestaurants().then(idbRestaurants => {\r\n          // If we get back more than 1 restaurant from idb, return idbRestaurants.\r\n          if (idbRestaurants.length > 0) {\r\n            callback(null, idbRestaurants)\r\n          } else { // If we got back 0 restaurants return an error.\r\n            callback('No restaurants found in idb', null);\r\n          }\r\n        });\r\n      }\r\n    };\r\n    // XHR needs error handling for when server is down (doesn't respond or sends back codes)\r\n    xhr.onerror = () => {\r\n      console.log('Error while trying XHR, trying idb...');\r\n      // Try idb, and if we get restaurants back, return them, otherwise return an error\r\n      dbPromise.getRestaurants().then(idbRestaurants => {\r\n        if (idbRestaurants.length > 0) {\r\n          callback(null, idbRestaurants)\r\n        } else {\r\n          callback('No restaurants found in idb', null);\r\n        }\r\n      });\r\n    }\r\n    xhr.send();\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    fetch(`${DBHelper.API_URL}/restaurants/${id}`).then(response => {\r\n      if (!response.ok) return Promise.reject(\"Restaurant couldn't be fetched from network\");\r\n      return response.json();\r\n    }).then(fetchedRestaurant => {\r\n      // If restaurant could be fetched from network:\r\n      dbPromise.putRestaurants(fetchedRestaurant);\r\n      return callback(null, fetchedRestaurant);\r\n    }).catch(networkError => {\r\n      // If restaurant couldn't be fetched from network:\r\n      console.log(`${networkError}, trying idb.`);\r\n      dbPromise.getRestaurants(id).then(idbRestaurant => {\r\n        if (!idbRestaurant) return callback(\"Restaurant not found in idb either\", null);\r\n        return callback(null, idbRestaurant);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type.\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood.\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine.\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood.\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants.\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods.\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants.\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines.\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL. It defaults to a medium sized image. It uses restaurant.photograph\r\n   * and fallbacks to restaurant.id if former is missing.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    let url = `/img/${(restaurant.photograph||restaurant.id)}-medium.jpg`;\r\n    return url;\r\n  }\r\n\r\n  /**\r\n   * Restaurant srcset attribute for browser to decide best resolution. It uses restaurant.photograph\r\n   * and fallbacks to restaurant.id if former is missing.\r\n   */\r\n  static imageSrcsetForRestaurant(restaurant) {\r\n    const imageSrc = `/img/${(restaurant.photograph||restaurant.id)}`;\r\n    return `${imageSrc}-small.jpg 300w,\r\n            ${imageSrc}-medium.jpg 600w,\r\n            ${imageSrc}-large.jpg 800w`;\r\n  }\r\n\r\n  /**\r\n   * Restaurant sizes attribute so browser knows image sizes before deciding\r\n   * what image to download.\r\n   */\r\n  static imageSizesForRestaurant(restaurant) {\r\n    return `(max-width: 360px) 280px,\r\n            (max-width: 600px) 600px,\r\n            400px`;\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n   static mapMarkerForRestaurant(restaurant, map) {\r\n    // https://leafletjs.com/reference-1.3.0.html#marker.\r\n    const marker = new L.marker([restaurant.latlng.lat, restaurant.latlng.lng],\r\n      {title: restaurant.name,\r\n      alt: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant)\r\n      })\r\n      marker.addTo(map);\r\n    return marker;\r\n  }\r\n\r\n  // Warning message when map is offline.\r\n  static mapOffline() {\r\n    const map = document.getElementById('map');\r\n    map.className = \"map-offline\";\r\n    map.innerHTML = `<div class=\"warning-icon\">!</div>\r\n    <div class=\"warning-message\">Map can't load at this moment!</div>\r\n    <div class=\"warning-suggestion\">Are you offline? Check your network connection and try again plese.</div>`;\r\n  }\r\n\r\n}\r\n\r\n","/*\r\n* I wil like to acknoledge the inspiration and guide I got from MWS Restaurant Reviews Project.\r\n* A Walkthrough by Alexandro Perez.Also,I adapted some of the walk through codes to make mine fully functionable.\r\n*/\r\n\r\n/*\r\n* Module import.\r\n*/\r\nimport idb from 'idb';\r\n\r\nconst dbPromise = {\r\n  // creation and updating of database.\r\n  db: idb.open('restaurant-reviews-db', 1, function (upgradeDb) {\r\n    switch (upgradeDb.oldVersion) {\r\n      case 0:\r\n        upgradeDb.createObjectStore('restaurants', { keyPath: 'id' });\r\n    }\r\n  }),\r\n\r\n  /**\r\n   * Save a restaurant or array of restaurants into idb, using promises.\r\n   */\r\n  putRestaurants(restaurants) {\r\n    if (!restaurants.push) restaurants = [restaurants];\r\n    return this.db.then(db => {\r\n      const store = db.transaction('restaurants', 'readwrite').objectStore('restaurants');\r\n      Promise.all(restaurants.map(networkRestaurant => {\r\n        return store.get(networkRestaurant.id).then(idbRestaurant => {\r\n          if (!idbRestaurant || networkRestaurant.updatedAt > idbRestaurant.updatedAt) {\r\n            return store.put(networkRestaurant);\r\n          }\r\n        });\r\n      })).then(function () {\r\n        return store.complete;\r\n      });\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Get a restaurant, by its id, or all stored restaurants in idb using promises.\r\n   * If no argument is passed, all restaurants will returned.\r\n   */\r\n  getRestaurants(id = undefined) {\r\n    return this.db.then(db => {\r\n      const store = db.transaction('restaurants').objectStore('restaurants');\r\n      if (id) return store.get(Number(id));\r\n      return store.getAll();\r\n    });\r\n  },\r\n\r\n};\r\n\r\nexport default dbPromise;","/*\r\n* I wil like to acknoledge the inspiration and guide I got from MWS Restaurant Reviews Project.\r\n* A Walkthrough by Alexandro Perez.Also,I adapted some of the walk through codes to make mine fully functionable.\r\n*/\r\n\r\n// Register service worker and check if it'ssupported.\r\nif (navigator.serviceWorker) {\r\n\tnavigator.serviceWorker.register('/sw.js').then(function(reg) {\r\n    console.log(\"Service Worker has been registered successfully!\");\r\n  }).catch((event) => {\r\n    console.log(\"Couldn't register service worker... \\n\", e);\r\n  });\r\n}","/*\r\n* I wil like to acknoledge the inspiration and guide I got from MWS Restaurant Reviews Project.\r\n* A Walkthrough by Alexandro Perez.Also,I adapted some of the walk through codes to make mine fully functionable.\r\n*/\r\n\r\n/*\r\n* Modules import.\r\n*/\r\nimport DBHelper from './dbhelper';\r\nimport SECRET from './secret';\r\nimport './register-sw';\r\n\r\n/*\r\n* Global variables.\r\n*/\r\nlet restaurant;\r\nvar newMap;\r\n\r\n/**\r\n * Initialize map as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n  initMap();\r\n});\r\n\r\n/**\r\n * Initialize leaflet map.\r\n */\r\nconst initMap = () => {\r\n  fetchRestaurantFromURL((error, restaurant) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      if (navigator.onLine) {\r\n        try {\r\n          newMap = L.map('map', {\r\n            center: [restaurant.latlng.lat, restaurant.latlng.lng],\r\n            zoom: 16,\r\n            scrollWheelZoom: false\r\n          });\r\n          L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\r\n            mapboxToken: SECRET.mapbox_key,\r\n            maxZoom: 18,\r\n            attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\r\n              '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\r\n              'Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\r\n            id: 'mapbox.streets'    \r\n          }).addTo(newMap);\r\n          DBHelper.mapMarkerForRestaurant(self.restaurant, newMap);\r\n        } catch(error) {\r\n          console.log(\"Map couldn't be initialized\", error);\r\n          // If an error occurred while trying to initialize the map, set map as offline.\r\n          DBHelper.mapOffline();\r\n        }\r\n      } else {\r\n        //  If app detects we're offline, set map as offline.\r\n        DBHelper.mapOffline();\r\n      }\r\n\r\n      fillBreadcrumb();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Get current restaurant from page URL.\r\n */\r\nconst fetchRestaurantFromURL = (callback) => {\r\n  if (self.restaurant) { // restaurant already fetched!\r\n    callback(null, self.restaurant)\r\n    return;\r\n  }\r\n  const id = getParameterByName('id');\r\n  if (!id) { // no id found in URL\r\n    error = 'No restaurant id in URL'\r\n    callback(error, null);\r\n  } else {\r\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\r\n      self.restaurant = restaurant;\r\n      if (!restaurant) {\r\n        console.error(error);\r\n        return;\r\n      }\r\n      fillRestaurantHTML();\r\n      callback(null, restaurant)\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Create restaurant HTML and add it to the webpage.\r\n */\r\nconst fillRestaurantHTML = (restaurant = self.restaurant) => {\r\n  const name = document.getElementById('restaurant-name');\r\n  name.innerHTML = restaurant.name;\r\n\r\n  const address = document.getElementById('restaurant-address');\r\n  address.innerHTML = restaurant.address;\r\n\r\n  const image = document.getElementById('restaurant-img');\r\n  image.className = 'restaurant-img'\r\n  image.alt = `Promotional image of ${restaurant.name}`;\r\n  image.title = `${restaurant.name}`;\r\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n  image.srcset = DBHelper.imageSrcsetForRestaurant(restaurant);\r\n  image.sizes = DBHelper.imageSizesForRestaurant(restaurant);\r\n\r\n  const cuisine = document.getElementById('restaurant-cuisine');\r\n  cuisine.innerHTML = restaurant.cuisine_type;\r\n\r\n  // Fill operating hours.\r\n  if (restaurant.operating_hours) {\r\n    fillRestaurantHoursHTML();\r\n  }\r\n  // Fill reviews.\r\n  fillReviewsHTML();\r\n}\r\n\r\n/**\r\n * Create restaurant operating hours HTML table and add it to the webpage.\r\n */\r\nconst fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\r\n  const hours = document.getElementById('restaurant-hours');\r\n  for (let key in operatingHours) {\r\n    const row = document.createElement('tr');\r\n\r\n    const day = document.createElement('td');\r\n    day.innerHTML = key;\r\n    row.appendChild(day);\r\n\r\n    const time = document.createElement('td');\r\n    time.innerHTML = operatingHours[key];\r\n    row.appendChild(time);\r\n\r\n    hours.appendChild(row);\r\n  }\r\n}\r\n\r\n/**\r\n * Create all reviews HTML and add them to the webpage.\r\n */\r\nconst fillReviewsHTML = (reviews = self.restaurant.reviews) => {\r\n  const container = document.getElementById('reviews-container');\r\n  const title = document.createElement('h2');\r\n  title.innerHTML = 'Reviews';\r\n  container.appendChild(title);\r\n\r\n  if (!reviews) {\r\n    const noReviews = document.createElement('p');\r\n    noReviews.innerHTML = 'No reviews yet!';\r\n    container.appendChild(noReviews);\r\n    return;\r\n  }\r\n  const ul = document.getElementById('reviews-list');\r\n  reviews.forEach(review => {\r\n    ul.appendChild(createReviewHTML(review));\r\n  });\r\n  container.appendChild(ul);\r\n}\r\n\r\n/**\r\n * Create review HTML and add it to the webpage.\r\n */\r\nconst createReviewHTML = (review) => {\r\n  const li = document.createElement('li');\r\n  const name = document.createElement('p');\r\n  name.innerHTML = review.name;\r\n  li.appendChild(name);\r\n\r\n  const date = document.createElement('p');\r\n  date.innerHTML = review.date;\r\n  li.appendChild(date);\r\n\r\n  const rating = document.createElement('p');\r\n  rating.innerHTML = `Rating: ${review.rating}`;\r\n  li.appendChild(rating);\r\n\r\n  const comments = document.createElement('p');\r\n  comments.innerHTML = review.comments;\r\n  li.appendChild(comments);\r\n\r\n  return li;\r\n}\r\n\r\n/**\r\n * Add restaurant name to the breadcrumb navigation menu\r\n */\r\nconst fillBreadcrumb = (restaurant=self.restaurant) => {\r\n  const breadcrumb = document.getElementById('breadcrumb');\r\n  const li = document.createElement('li');\r\n  li.innerHTML = restaurant.name;\r\n  breadcrumb.appendChild(li);\r\n}\r\n\r\n/**\r\n * Get a parameter by name from page URL.\r\n */\r\nconst getParameterByName = (name, url) => {\r\n  if (!url)\r\n    url = window.location.href;\r\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\r\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\r\n    results = regex.exec(url);\r\n  if (!results)\r\n    return null;\r\n  if (!results[2])\r\n    return '';\r\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\r\n}\r\n","// Create object for the map box API key.\r\nexport default class SECRET {\r\n\tstatic get mapbox_key() {\r\n\t\treturn \"pk.eyJ1Ijoic2FwYXNoaW5pIiwiYSI6ImNqbnVtZ2I2eDE2OXEzcnByajZyandyYncifQ.lhVLbD2P-C2NI4cr4O1l9A\";\r\n\t}\r\n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}